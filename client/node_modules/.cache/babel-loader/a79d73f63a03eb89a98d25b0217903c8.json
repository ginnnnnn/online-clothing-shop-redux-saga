{"ast":null,"code":"import _objectSpread from \"/Users/ginnnnnn/Documents/react-online-ecommerse/online-clothing-shop/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/ginnnnnn/Documents/react-online-ecommerse/online-clothing-shop/src/App.js\";\nimport React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport HomePage from './pages/homepage/homepage.component';\nimport ShopPage from './pages/shop/shop.component';\nimport Header from './components/header/header.component';\nimport SignInAndSignUp from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component';\nimport { auth, createUserProfileDocument, firestore } from './firebase/firebase.utils';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.unsubscribeFromAuth = null;\n    this.state = {\n      currentUser: null\n    };\n  } //set a initail unsubAuth function\n\n\n  componentDidMount() {\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      console.log(userAuth); //firebase.auth().onAuthStateChanged subscribe auth and return unsubscribe function\n      //if signin user is an obj if signout user is null, always setState to triger rerender\n\n      if (userAuth.displayName) {\n        const userRef = await createUserProfileDocument(userAuth); //onSnapshot() is a realtime watching document state change method\n        //it has method data() to get data and property exist check if data exist\n\n        userRef.onSnapshot(snapshot => {\n          this.setState({\n            currentUser: _objectSpread({\n              id: snapshot.id\n            }, snapshot.data())\n          });\n          console.log(this.state);\n        });\n      } else if (userAuth && !userAuth.displayName) {\n        const userRef = firestore.doc(\"users/\".concat(userAuth.uid));\n        userRef.onSnapshot(snapshot => {\n          this.setState({\n            currentUser: _objectSpread({\n              id: snapshot.id\n            }, snapshot.data())\n          });\n        });\n      } else {\n        this.setState({\n          currentUser: userAuth\n        }); //set currentUser to null\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth(); //this prevent memory leak,cus firebase.auth().onAuthStateChanged() will keep monitoring\n    //to check user auth status\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Header, {\n      currentUser: this.state.currentUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: HomePage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/shop\",\n      component: ShopPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/signin\",\n      component: SignInAndSignUp,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App; //without withRouter only the first route get history match location props","map":{"version":3,"sources":["/Users/ginnnnnn/Documents/react-online-ecommerse/online-clothing-shop/src/App.js"],"names":["React","Switch","Route","HomePage","ShopPage","Header","SignInAndSignUp","auth","createUserProfileDocument","firestore","App","Component","constructor","unsubscribeFromAuth","state","currentUser","componentDidMount","onAuthStateChanged","userAuth","console","log","displayName","userRef","onSnapshot","snapshot","setState","id","data","doc","uid","componentWillUnmount","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,kBAA9B;AACA,OAAO,WAAP;AAEA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,OAAOC,eAAP,MAA4B,2DAA5B;AAEA,SAASC,IAAT,EAAeC,yBAAf,EAA0CC,SAA1C,QAA2D,2BAA3D;;AAGA,MAAMC,GAAN,SAAkBV,KAAK,CAACW,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,GAAG;AACZ;AADY,SASdC,mBATc,GASQ,IATR;AAGZ,SAAKC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE;AADF,KAAb;AAGD,GAP+B,CAShC;;;AAGAC,EAAAA,iBAAiB,GAAG;AAClB,SAAKH,mBAAL,GAA2BN,IAAI,CAACU,kBAAL,CAAwB,MAAOC,QAAP,IAAoB;AACrEC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ,EADqE,CAErE;AACA;;AACA,UAAIA,QAAQ,CAACG,WAAb,EAA0B;AACxB,cAAMC,OAAO,GAAG,MAAMd,yBAAyB,CAACU,QAAD,CAA/C,CADwB,CAExB;AACA;;AACAI,QAAAA,OAAO,CAACC,UAAR,CAAmBC,QAAQ,IAAI;AAC7B,eAAKC,QAAL,CAAc;AACZV,YAAAA,WAAW;AACTW,cAAAA,EAAE,EAAEF,QAAQ,CAACE;AADJ,eAENF,QAAQ,CAACG,IAAT,EAFM;AADC,WAAd;AAMAR,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,KAAjB;AACD,SARD;AASD,OAbD,MAaO,IAAII,QAAQ,IAAI,CAACA,QAAQ,CAACG,WAA1B,EAAuC;AAC5C,cAAMC,OAAO,GAAGb,SAAS,CAACmB,GAAV,iBAAuBV,QAAQ,CAACW,GAAhC,EAAhB;AACAP,QAAAA,OAAO,CAACC,UAAR,CAAmBC,QAAQ,IAAI;AAC7B,eAAKC,QAAL,CAAc;AACZV,YAAAA,WAAW;AACTW,cAAAA,EAAE,EAAEF,QAAQ,CAACE;AADJ,eAENF,QAAQ,CAACG,IAAT,EAFM;AADC,WAAd;AAMD,SAPD;AAQD,OAVM,MAUA;AACL,aAAKF,QAAL,CAAc;AAAEV,UAAAA,WAAW,EAAEG;AAAf,SAAd,EADK,CAEL;AACD;AACF,KA/B0B,CAA3B;AAgCD;;AAEDY,EAAAA,oBAAoB,GAAG;AACrB,SAAKjB,mBAAL,GADqB,CAErB;AACA;AACD;;AAGDkB,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,WAAW,EAAE,KAAKjB,KAAL,CAAWC,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,GAAlB;AAAsB,MAAA,SAAS,EAAEZ,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAEC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,SAAZ;AAAsB,MAAA,SAAS,EAAEE,eAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CAFF,CADF;AAUD;;AAjE+B;;AAoElC,eAAeI,GAAf,C,CAEA","sourcesContent":["import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport './App.css';\n\nimport HomePage from './pages/homepage/homepage.component';\nimport ShopPage from './pages/shop/shop.component';\nimport Header from './components/header/header.component';\nimport SignInAndSignUp from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component'\n\nimport { auth, createUserProfileDocument, firestore } from './firebase/firebase.utils'\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      currentUser: null\n    }\n  }\n\n  //set a initail unsubAuth function\n  unsubscribeFromAuth = null;\n\n  componentDidMount() {\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async (userAuth) => {\n      console.log(userAuth)\n      //firebase.auth().onAuthStateChanged subscribe auth and return unsubscribe function\n      //if signin user is an obj if signout user is null, always setState to triger rerender\n      if (userAuth.displayName) {\n        const userRef = await createUserProfileDocument(userAuth);\n        //onSnapshot() is a realtime watching document state change method\n        //it has method data() to get data and property exist check if data exist\n        userRef.onSnapshot(snapshot => {\n          this.setState({\n            currentUser: {\n              id: snapshot.id,\n              ...snapshot.data()\n            }\n          });\n          console.log(this.state);\n        });\n      } else if (userAuth && !userAuth.displayName) {\n        const userRef = firestore.doc(`users/${userAuth.uid}`);\n        userRef.onSnapshot(snapshot => {\n          this.setState({\n            currentUser: {\n              id: snapshot.id,\n              ...snapshot.data()\n            }\n          });\n        })\n      } else {\n        this.setState({ currentUser: userAuth });\n        //set currentUser to null\n      }\n    })\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n    //this prevent memory leak,cus firebase.auth().onAuthStateChanged() will keep monitoring\n    //to check user auth status\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header currentUser={this.state.currentUser} />\n        <Switch>\n          <Route exact path='/' component={HomePage} />\n          <Route path='/shop' component={ShopPage} />\n          <Route path='/signin' component={SignInAndSignUp} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//without withRouter only the first route get history match location props"]},"metadata":{},"sourceType":"module"}