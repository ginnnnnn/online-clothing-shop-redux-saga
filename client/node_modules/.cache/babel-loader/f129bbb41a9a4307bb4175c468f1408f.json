{"ast":null,"code":"var _jsxFileName = \"/Users/ginnnnnn/Documents/react-online-ecommerse/online-clothing-shop/src/pages/shop/shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { fetchCollentionsAsync } from '../../redux/shop/shop.actions';\nimport { createStructuredSelector } from 'reselect';\nimport { selectShopIsFetching, selectIsCollectionsLoaded } from '../../redux/shop/shop.selectors';\nimport CollectionOverviewContainer from '../../components/collection-overview/collection-overview.container';\nimport CollectionPage from '../collection/collection.component';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  componentDidMount() {\n    this.props.fetchCollentionsAsync(); // const collectionRef = firestore.collection('itemCollections')\n    // this.unsubscribeFromShop = collectionRef.onSnapshot(async snapshot => {\n    //     const collectionsMap = await convertCollectionsSnapshotToMap(snapshot);\n    //     this.props.updateShopCollections(collectionsMap);\n    //     this.setState({ loading: false })\n    // })\n  } // componentWillUnmount() {\n  //     this.unsubscribeFromShop()\n  // }\n\n\n  render() {\n    const _this$props = this.props,\n          match = _this$props.match,\n          isFetching = _this$props.isFetching,\n          isCollectionsLoaded = _this$props.isCollectionsLoaded;\n    return React.createElement(\"div\", {\n      className: \"shop-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"\".concat(match.path),\n      component: CollectionOverviewContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"\".concat(match.path, \"/:collectionId\"),\n      render: props => React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: !isCollectionsLoaded\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isFetching: selectShopIsFetching,\n  isCollectionsLoaded: selectIsCollectionsLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollentionsAsync: () => dispatch(fetchCollentionsAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage); //render={(props) => <CollectionOverviewWithSpinner isLoading={loading} {...props} />}\n//props in route is for passing route props like history ,match  and location","map":{"version":3,"sources":["/Users/ginnnnnn/Documents/react-online-ecommerse/online-clothing-shop/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","fetchCollentionsAsync","createStructuredSelector","selectShopIsFetching","selectIsCollectionsLoaded","CollectionOverviewContainer","CollectionPage","WithSpinner","CollectionPageWithSpinner","ShopPage","Component","componentDidMount","props","render","match","isFetching","isCollectionsLoaded","path","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AAGA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,qBAAT,QAAsC,+BAAtC;AAEA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,oBAAT,EAA+BC,yBAA/B,QAAgE,iCAAhE;AAEA,OAAOC,2BAAP,MAAwC,oEAAxC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,MAAMC,yBAAyB,GAAGD,WAAW,CAACD,cAAD,CAA7C;;AAGA,MAAMG,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AAGnCC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,KAAL,CAAWX,qBAAX,GADgB,CAEhB;AACA;AACA;AACA;AACA;AACA;AACH,GAXkC,CAanC;AACA;AACA;;;AACAY,EAAAA,MAAM,GAAG;AAAA,wBAE8C,KAAKD,KAFnD;AAAA,UAEGE,KAFH,eAEGA,KAFH;AAAA,UAEUC,UAFV,eAEUA,UAFV;AAAA,UAEsBC,mBAFtB,eAEsBA,mBAFtB;AAGL,WACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,YAAKF,KAAK,CAACG,IAAX,CAAjB;AAAoC,MAAA,SAAS,EAAEZ,2BAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,YAAKS,KAAK,CAACG,IAAX,mBAAX;AACI,MAAA,MAAM,EAAGL,KAAD,IAAW,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAE,CAACI;AAAvC,SAAgEJ,KAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAOH;;AA1BkC;;AA6BvC,MAAMM,eAAe,GAAGhB,wBAAwB,CAAC;AAC7Ca,EAAAA,UAAU,EAAEZ,oBADiC;AAE7Ca,EAAAA,mBAAmB,EAAEZ;AAFwB,CAAD,CAAhD;;AAIA,MAAMe,kBAAkB,GAAGC,QAAQ,KAAK;AACpCnB,EAAAA,qBAAqB,EAAE,MAAMmB,QAAQ,CAACnB,qBAAqB,EAAtB;AADD,CAAL,CAAnC;;AAIA,eAAeD,OAAO,CAACkB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CV,QAA7C,CAAf,C,CAEA;AACA","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\n\n\nimport { connect } from 'react-redux';\nimport { fetchCollentionsAsync } from '../../redux/shop/shop.actions';\n\nimport { createStructuredSelector } from 'reselect';\nimport { selectShopIsFetching, selectIsCollectionsLoaded } from '../../redux/shop/shop.selectors';\n\nimport CollectionOverviewContainer from '../../components/collection-overview/collection-overview.container';\nimport CollectionPage from '../collection/collection.component';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\n\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\n\nclass ShopPage extends React.Component {\n\n\n    componentDidMount() {\n        this.props.fetchCollentionsAsync()\n        // const collectionRef = firestore.collection('itemCollections')\n        // this.unsubscribeFromShop = collectionRef.onSnapshot(async snapshot => {\n        //     const collectionsMap = await convertCollectionsSnapshotToMap(snapshot);\n        //     this.props.updateShopCollections(collectionsMap);\n        //     this.setState({ loading: false })\n        // })\n    }\n\n    // componentWillUnmount() {\n    //     this.unsubscribeFromShop()\n    // }\n    render() {\n\n        const { match, isFetching, isCollectionsLoaded } = this.props;\n        return (\n            <div className='shop-page'>\n                <Route exact path={`${match.path}`} component={CollectionOverviewContainer} />\n                <Route path={`${match.path}/:collectionId`}\n                    render={(props) => <CollectionPageWithSpinner isLoading={!isCollectionsLoaded} {...props} />} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = createStructuredSelector({\n    isFetching: selectShopIsFetching,\n    isCollectionsLoaded: selectIsCollectionsLoaded\n})\nconst mapDispatchToProps = dispatch => ({\n    fetchCollentionsAsync: () => dispatch(fetchCollentionsAsync())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\n\n//render={(props) => <CollectionOverviewWithSpinner isLoading={loading} {...props} />}\n//props in route is for passing route props like history ,match  and location"]},"metadata":{},"sourceType":"module"}