{"ast":null,"code":"var _jsxFileName = \"/Users/ginnnnnn/Documents/react-online-ecommerse/online-clothing-shop/src/pages/shop/shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { fetchCollentionsAsync } from '../../redux/shop/shop.actions';\nimport { createStructuredSelector } from 'reselect';\nimport { selectShopIsFetching } from '../../redux/shop/shop.selectors';\nimport CollectionOverview from '../../components/collection-overview/collection-overview.component';\nimport CollectionPage from '../collection/collection.component';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  componentDidMount() {\n    this.props.fetchCollentionsAsync(); // const collectionRef = firestore.collection('itemCollections')\n    // this.unsubscribeFromShop = collectionRef.onSnapshot(async snapshot => {\n    //     const collectionsMap = await convertCollectionsSnapshotToMap(snapshot);\n    //     this.props.updateShopCollections(collectionsMap);\n    //     this.setState({ loading: false })\n    // })\n  } // componentWillUnmount() {\n  //     this.unsubscribeFromShop()\n  // }\n\n\n  render() {\n    const _this$props = this.props,\n          match = _this$props.match,\n          isFetching = _this$props.isFetching;\n    return React.createElement(\"div\", {\n      className: \"shop-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"\".concat(match.path),\n      render: props => React.createElement(CollectionOverviewWithSpinner, Object.assign({\n        isLoading: isFetching\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"\".concat(match.path, \"/:collectionId\"),\n      render: props => React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: isFetching,\n        itemCollections: collections\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  itemCollections: selectShopCollections,\n  isFetching: selectShopIsFetching\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollentionsAsync: () => dispatch(fetchCollentionsAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage); //render={(props) => <CollectionOverviewWithSpinner isLoading={loading} {...props} />}\n//props in route is for passing route props like history ,match  and location","map":{"version":3,"sources":["/Users/ginnnnnn/Documents/react-online-ecommerse/online-clothing-shop/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","fetchCollentionsAsync","createStructuredSelector","selectShopIsFetching","CollectionOverview","CollectionPage","WithSpinner","CollectionOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","componentDidMount","props","render","match","isFetching","path","collections","mapStateToProps","itemCollections","selectShopCollections","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AAGA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,qBAAT,QAAsC,+BAAtC;AAEA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,oBAAT,QAAqC,iCAArC;AAEA,OAAOC,kBAAP,MAA+B,oEAA/B;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,MAAMC,6BAA6B,GAAGD,WAAW,CAACF,kBAAD,CAAjD;AACA,MAAMI,yBAAyB,GAAGF,WAAW,CAACD,cAAD,CAA7C;;AAGA,MAAMI,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AAGnCC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,KAAL,CAAWX,qBAAX,GADgB,CAEhB;AACA;AACA;AACA;AACA;AACA;AACH,GAXkC,CAanC;AACA;AACA;;;AACAY,EAAAA,MAAM,GAAG;AAAA,wBAEyB,KAAKD,KAF9B;AAAA,UAEGE,KAFH,eAEGA,KAFH;AAAA,UAEUC,UAFV,eAEUA,UAFV;AAGL,WACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,YAAKD,KAAK,CAACE,IAAX,CAAjB;AACI,MAAA,MAAM,EAAGJ,KAAD,IAAW,oBAAC,6BAAD;AAA+B,QAAA,SAAS,EAAEG;AAA1C,SAA0DH,KAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAGI,oBAAC,KAAD;AAAO,MAAA,IAAI,YAAKE,KAAK,CAACE,IAAX,mBAAX;AACI,MAAA,MAAM,EAAGJ,KAAD,IAAW,oBAAC,yBAAD;AACf,QAAA,SAAS,EAAEG,UADI;AAEf,QAAA,eAAe,EAAEE;AAFF,SAEoBL,KAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CADJ;AAUH;;AA7BkC;;AAgCvC,MAAMM,eAAe,GAAGhB,wBAAwB,CAAC;AAC7CiB,EAAAA,eAAe,EAAEC,qBAD4B;AAE7CL,EAAAA,UAAU,EAAEZ;AAFiC,CAAD,CAAhD;;AAIA,MAAMkB,kBAAkB,GAAGC,QAAQ,KAAK;AACpCrB,EAAAA,qBAAqB,EAAE,MAAMqB,QAAQ,CAACrB,qBAAqB,EAAtB;AADD,CAAL,CAAnC;;AAIA,eAAeD,OAAO,CAACkB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CZ,QAA7C,CAAf,C,CAEA;AACA","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\n\n\nimport { connect } from 'react-redux';\nimport { fetchCollentionsAsync } from '../../redux/shop/shop.actions';\n\nimport { createStructuredSelector } from 'reselect';\nimport { selectShopIsFetching } from '../../redux/shop/shop.selectors';\n\nimport CollectionOverview from '../../components/collection-overview/collection-overview.component';\nimport CollectionPage from '../collection/collection.component';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\n\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\n\nclass ShopPage extends React.Component {\n\n\n    componentDidMount() {\n        this.props.fetchCollentionsAsync()\n        // const collectionRef = firestore.collection('itemCollections')\n        // this.unsubscribeFromShop = collectionRef.onSnapshot(async snapshot => {\n        //     const collectionsMap = await convertCollectionsSnapshotToMap(snapshot);\n        //     this.props.updateShopCollections(collectionsMap);\n        //     this.setState({ loading: false })\n        // })\n    }\n\n    // componentWillUnmount() {\n    //     this.unsubscribeFromShop()\n    // }\n    render() {\n\n        const { match, isFetching } = this.props;\n        return (\n            <div className='shop-page'>\n                <Route exact path={`${match.path}`}\n                    render={(props) => <CollectionOverviewWithSpinner isLoading={isFetching} {...props} />} />\n                <Route path={`${match.path}/:collectionId`}\n                    render={(props) => <CollectionPageWithSpinner\n                        isLoading={isFetching}\n                        itemCollections={collections}  {...props} />} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = createStructuredSelector({\n    itemCollections: selectShopCollections,\n    isFetching: selectShopIsFetching\n})\nconst mapDispatchToProps = dispatch => ({\n    fetchCollentionsAsync: () => dispatch(fetchCollentionsAsync())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\n\n//render={(props) => <CollectionOverviewWithSpinner isLoading={loading} {...props} />}\n//props in route is for passing route props like history ,match  and location"]},"metadata":{},"sourceType":"module"}