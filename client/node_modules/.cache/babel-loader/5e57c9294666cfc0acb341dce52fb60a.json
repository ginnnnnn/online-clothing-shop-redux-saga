{"ast":null,"code":"import { fetchCollectionsSuccess, fecthCollectionsFailure } from './shop.actions';\nimport { takeEvery, call } from 'redux-saga/effects'; //takeEvery create a non-blocking processing in generator function\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport shopActionTypes from './shop.types';\nexport function* fetchCollectionsAsync() {\n  yield console.log('im fired');\n\n  try {\n    const collectionRef = firestore.collection('itemCollections');\n    const snapshot = yield collectionRef.get(); //store .then(snapshot=>snapshot) snapshot to yield and assign to snapshot\n    //more like await\n\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fecthCollectionsFailure(error.message));\n  }\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(shopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/ginnnnnn/Documents/react-online-ecommerse/online-clothing-shop redux-saga applied/src/redux/shop/shop.sagas.js"],"names":["fetchCollectionsSuccess","fecthCollectionsFailure","takeEvery","call","firestore","convertCollectionsSnapshotToMap","shopActionTypes","fetchCollectionsAsync","console","log","collectionRef","collection","snapshot","get","collectionsMap","put","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,uBAAT,EAAkCC,uBAAlC,QAAiE,gBAAjE;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,oBAAhC,C,CACA;;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMC,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAN;;AACA,MAAI;AACA,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,iBAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB,CAFA,CAGA;AACA;;AACA,UAAMC,cAAc,GAAG,MAAMX,IAAI,CAACE,+BAAD,EAAkCO,QAAlC,CAAjC;AACA,UAAMG,GAAG,CAACf,uBAAuB,CAACc,cAAD,CAAxB,CAAT;AAEH,GARD,CAQE,OAAOE,KAAP,EAAc;AACZ,UAAMD,GAAG,CAACd,uBAAuB,CAACe,KAAK,CAACC,OAAP,CAAxB,CAAT;AACH;AACJ;AAID,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMhB,SAAS,CAACI,eAAe,CAACa,uBAAjB,EACTZ,qBADS,CAAf;AAEH","sourcesContent":["import { fetchCollectionsSuccess, fecthCollectionsFailure } from './shop.actions'\nimport { takeEvery, call } from 'redux-saga/effects';\n//takeEvery create a non-blocking processing in generator function\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\n\nimport shopActionTypes from './shop.types';\n\nexport function* fetchCollectionsAsync() {\n    yield console.log('im fired')\n    try {\n        const collectionRef = firestore.collection('itemCollections');\n        const snapshot = yield collectionRef.get();\n        //store .then(snapshot=>snapshot) snapshot to yield and assign to snapshot\n        //more like await\n        const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n        yield put(fetchCollectionsSuccess(collectionsMap))\n\n    } catch (error) {\n        yield put(fecthCollectionsFailure(error.message))\n    }\n}\n\n\n\nexport function* fetchCollectionsStart() {\n    yield takeEvery(shopActionTypes.FETCH_COLLECTIONS_START\n        , fetchCollectionsAsync)\n}"]},"metadata":{},"sourceType":"module"}